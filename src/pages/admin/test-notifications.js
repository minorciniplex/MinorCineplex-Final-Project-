import { useState, useEffect } from "react";
import axios from "axios";

const TestNotifications = () => {
  const [testType, setTestType] = useState("email");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [name, setName] = useState("");
  const [loading, setLoading] = useState(false);
  const [results, setResults] = useState(null);
  const [serviceStatus, setServiceStatus] = useState(null);

  // Load service status on component mount
  useEffect(() => {
    const fetchServiceStatus = async () => {
      try {
        const response = await axios.get("/api/test/service-status");
        setServiceStatus(response.data);
      } catch (error) {
        console.error("Failed to fetch service status:", error);
      }
    };
    
    fetchServiceStatus();
  }, []);

  const handleTest = async (e) => {
    e.preventDefault();
    setLoading(true);
    setResults(null);

    try {
      const testData = {
        email: email || undefined,
        phone: phone || undefined,
        name: name || undefined
      };

      const response = await axios.post("/api/test/send-test", {
        type: testType,
        testData: testData
      });

      setResults(response.data);
    } catch (error) {
      console.error("Test failed:", error);
      setResults({
        success: false,
        message: "Test failed",
        error: error.response?.data?.error || error.message
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-[--background-start] p-8">
      <div className="max-w-2xl mx-auto">
        <h1 className="text-white text-3xl font-bold mb-8">
          üîî ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        </h1>

        {/* Service Status */}
        {serviceStatus && (
          <div className="bg-[#070C1B] rounded-lg p-6 mb-6">
            <h2 className="text-white text-xl font-semibold mb-4">
              üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Email Status */}
              <div className="bg-[#21263F] p-4 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <span>üìß</span>
                  <span className="text-white font-medium">Email Service</span>
                  <span className={`text-sm px-2 py-1 rounded ${
                    serviceStatus.email.configured 
                      ? 'bg-green-600 text-white' 
                      : 'bg-red-600 text-white'
                  }`}>
                    {serviceStatus.email.configured ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'}
                  </span>
                </div>
                <div className="text-sm text-gray-400 space-y-1">
                  <p>‚úâÔ∏è Email User: {serviceStatus.email.hasEmailUser ? '‚úÖ' : '‚ùå'}</p>
                  <p>üîë Password: {serviceStatus.email.hasEmailPassword ? '‚úÖ' : '‚ùå'}</p>
                  <p>üìß Valid Email: {serviceStatus.email.validEmailUser ? '‚úÖ' : '‚ùå'}</p>
                </div>
              </div>

              {/* SMS Status */}
              <div className="bg-[#21263F] p-4 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <span>üì±</span>
                  <span className="text-white font-medium">SMS Service</span>
                  <span className={`text-sm px-2 py-1 rounded ${
                    serviceStatus.sms.configured 
                      ? 'bg-green-600 text-white' 
                      : 'bg-red-600 text-white'
                  }`}>
                    {serviceStatus.sms.configured ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'}
                  </span>
                </div>
                <div className="text-sm text-gray-400 space-y-1">
                  <p>üÜî Account SID: {serviceStatus.sms.hasAccountSid ? '‚úÖ' : '‚ùå'}</p>
                  <p>üîë Auth Token: {serviceStatus.sms.hasAuthToken ? '‚úÖ' : '‚ùå'}</p>
                  <p>üìû Phone Number: {serviceStatus.sms.hasPhoneNumber ? '‚úÖ' : '‚ùå'}</p>
                  <p>‚úÖ Valid SID: {serviceStatus.sms.validAccountSid ? '‚úÖ' : '‚ùå'}</p>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <div className="bg-[#070C1B] rounded-lg p-6 mb-6">
          <form onSubmit={handleTest} className="space-y-6">
            {/* Test Type Selection */}
            <div>
              <label className="block text-white text-sm font-medium mb-2">
                ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
              </label>
              <select
                value={testType}
                onChange={(e) => setTestType(e.target.value)}
                className="w-full px-3 py-2 bg-[#21263F] text-white rounded-lg border border-[--base-gray-100] focus:outline-none focus:border-[--brand-blue]"
              >
                <option value="email">Email ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</option>
                <option value="sms">SMS ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</option>
                <option value="all">‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (Email + SMS + In-App)</option>
              </select>
            </div>

            {/* Email Input */}
            {(testType === "email" || testType === "all") && (
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  üìß Email Address
                </label>
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="test@example.com"
                  required={testType === "email" || testType === "all"}
                  className="w-full px-3 py-2 bg-[#21263F] text-white rounded-lg border border-[--base-gray-100] focus:outline-none focus:border-[--brand-blue]"
                />
              </div>
            )}

            {/* Phone Input */}
            {(testType === "sms" || testType === "all") && (
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  üì± ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
                </label>
                <input
                  type="tel"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  placeholder="0812345678"
                  required={testType === "sms"}
                  className="w-full px-3 py-2 bg-[#21263F] text-white rounded-lg border border-[--base-gray-100] focus:outline-none focus:border-[--brand-blue]"
                />
                <p className="text-[--base-gray-400] text-xs mt-1">
                  ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: 0812345678 ‡∏´‡∏£‡∏∑‡∏≠ +66812345678
                </p>
              </div>
            )}

            {/* Name Input */}
            {testType === "all" && (
              <div>
                <label className="block text-white text-sm font-medium mb-2">
                  üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
                </label>
                <input
                  type="text"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  placeholder="‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
                  className="w-full px-3 py-2 bg-[#21263F] text-white rounded-lg border border-[--base-gray-100] focus:outline-none focus:border-[--brand-blue]"
                />
              </div>
            )}

            {/* Submit Button */}
            <button
              type="submit"
              disabled={loading}
              className="w-full bg-[--brand-blue] text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á..." : "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"}
            </button>
          </form>
        </div>

        {/* Results Display */}
        {results && (
          <div className="bg-[#070C1B] rounded-lg p-6">
            <h2 className="text-white text-xl font-semibold mb-4">
              üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
            </h2>
            
            <div className={`p-4 rounded-lg mb-4 ${
              results.success ? 'bg-green-900/20 border border-green-500' : 'bg-red-900/20 border border-red-500'
            }`}>
              <p className={`font-medium ${results.success ? 'text-green-400' : 'text-red-400'}`}>
                {results.message}
              </p>
            </div>

            {/* Detailed Results for "all" test */}
            {results.results && (
              <div className="space-y-4">
                <h3 className="text-white font-medium">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</h3>
                
                {/* Email Result */}
                {results.results.email.attempted && (
                  <div className="bg-[#21263F] p-3 rounded-lg">
                    <div className="flex items-center gap-2 mb-1">
                      <span>üìß</span>
                      <span className="text-white font-medium">Email</span>
                      <span className={`text-sm px-2 py-1 rounded ${
                        results.results.email.success 
                          ? 'bg-green-600 text-white' 
                          : 'bg-red-600 text-white'
                      }`}>
                        {results.results.email.success ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}
                      </span>
                    </div>
                    {results.results.email.error && (
                      <p className="text-red-400 text-sm">
                        ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {results.results.email.error}
                      </p>
                    )}
                  </div>
                )}

                {/* SMS Result */}
                {results.results.sms.attempted && (
                  <div className="bg-[#21263F] p-3 rounded-lg">
                    <div className="flex items-center gap-2 mb-1">
                      <span>üì±</span>
                      <span className="text-white font-medium">SMS</span>
                      <span className={`text-sm px-2 py-1 rounded ${
                        results.results.sms.success 
                          ? 'bg-green-600 text-white' 
                          : 'bg-red-600 text-white'
                      }`}>
                        {results.results.sms.success ? '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}
                      </span>
                    </div>
                    {results.results.sms.error && (
                      <p className="text-red-400 text-sm">
                        ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {results.results.sms.error}
                      </p>
                    )}
                  </div>
                )}

                {/* Summary */}
                {results.results.summary && (
                  <div className="bg-[#21263F] p-3 rounded-lg">
                    <h4 className="text-white font-medium mb-2">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•:</h4>
                    <div className="text-sm text-[--base-gray-400] space-y-1">
                      <p>‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {results.results.summary.totalSent}</p>
                      <p>‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {results.results.summary.totalFailed}</p>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Single Test Results */}
            {results.messageId && (
              <div className="bg-[#21263F] p-3 rounded-lg">
                <h4 className="text-white font-medium mb-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</h4>
                <p className="text-[--base-gray-400] text-sm">
                  üìß Message ID: {results.messageId}
                </p>
                <p className="text-green-400 text-sm mt-1">
                  ‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!
                </p>
              </div>
            )}

            {/* Error Details */}
            {results.error && (
              <div className="bg-[#21263F] p-3 rounded-lg">
                <h4 className="text-white font-medium mb-2">‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:</h4>
                <p className="text-red-400 text-sm">
                  {results.error}
                </p>
              </div>
            )}
          </div>
        )}

        {/* Information */}
        <div className="bg-[#070C1B] rounded-lg p-6 mt-6">
          <h2 className="text-white text-lg font-semibold mb-3">
            ‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
          </h2>
          <div className="text-[--base-gray-400] text-sm space-y-2">
            <p>‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</p>
            <p>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Spam/Junk ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö email</p>
            <p>‚Ä¢ SMS ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å Twilio service (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ credit)</p>
            <p>‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö "‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó" ‡∏à‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TestNotifications; 